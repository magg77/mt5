
# 0.01 = XAUUSD /   XAGUSD  /   USD/JPY
# 0.0001 = EUR/USD, GBP/USD

import MetaTrader5 as mt5
import time
import pandas as pd

# --- Configuraci√≥n del bot ---
LOTES_POR_SIMBOLO = {
    "ETHUSD": 0.1
}

SYMBOLS = list(LOTES_POR_SIMBOLO.keys())
STOP_LOSS_PIPS = 1000
TAKE_PROFIT_PIPS = 10000
INTERVAL_SECONDS = 3
SLEEP_INTERVAL = 2
TIMEFRAME = mt5.TIMEFRAME_M1
EMA_PERIOD = 50
NUMBER_OF_CANDLES = 5000

def init_mt5():
    """Inicializa la conexi√≥n con MetaTrader 5."""
    if not mt5.initialize():
        print("‚ùå No se pudo inicializar MetaTrader 5")
        quit()

def close_all_positions():
    """Cierra todas las posiciones abiertas al iniciar el bot."""
    positions = mt5.positions_get()
    if positions is None:
        print("‚ö†Ô∏è Error al obtener posiciones abiertas")
        return

    for pos in positions:
        # Selecciona el precio adecuado seg√∫n el tipo de orden
        price = mt5.symbol_info_tick(pos.symbol).bid if pos.type == mt5.ORDER_TYPE_BUY else mt5.symbol_info_tick(pos.symbol).ask
        
        # Crea la solicitud de cierre
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": pos.symbol,
            "volume": pos.volume,
            "type": mt5.ORDER_TYPE_SELL if pos.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY,
            "position": pos.ticket,
            "price": price,
            "deviation": 10,
            "magic": 234000,
            "comment": "Cerrar posici√≥n al iniciar",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_IOC,
        }
        mt5.order_send(request)

def get_ema(data, period):
    """Calcula la media m√≥vil exponencial (EMA) del cierre."""
    return data['close'].ewm(span=period, adjust=False).mean()

def get_valid_lot_size(symbol, raw_lot):
    """Devuelve el tama√±o de lote v√°lido seg√∫n el s√≠mbolo."""
    symbol_info = mt5.symbol_info(symbol)
    if not symbol_info:
        print(f"‚ö†Ô∏è No se encontr√≥ informaci√≥n del s√≠mbolo: {symbol}")
        return 0.01

    min_lot = symbol_info.volume_min
    max_lot = symbol_info.volume_max
    lot_step = symbol_info.volume_step

    # Ajusta el lote dentro de los l√≠mites
    lot = max(min_lot, min(raw_lot, max_lot))
    steps = round((lot - min_lot) / lot_step)
    return round(min_lot + steps * lot_step, 2)

def adjust_pips_to_minimum(symbol, pips):
    """Ajusta los pips al m√≠nimo permitido por el br√≥ker."""
    info = mt5.symbol_info(symbol)
    min_pips = (info.trade_stops_level or 10) / 10.0
    return max(pips, min_pips)

def place_order(symbol, lot, order_type, stop_loss_pips, take_profit_pips):
    """Coloca una orden de mercado con SL y TP."""
    info = mt5.symbol_info(symbol)
    if not info or not info.trade_tick_value:
        return

    if not info.visible and not mt5.symbol_select(symbol, True):
        return

    tick = mt5.symbol_info_tick(symbol)
    if not tick:
        return

    price = tick.ask if order_type == mt5.ORDER_TYPE_BUY else tick.bid
    point = info.point

    # Ajusta SL y TP seg√∫n distancia m√≠nima
    sl_pips = adjust_pips_to_minimum(symbol, stop_loss_pips)
    tp_pips = adjust_pips_to_minimum(symbol, take_profit_pips)

    sl = price - sl_pips * point if order_type == mt5.ORDER_TYPE_BUY else price + sl_pips * point
    tp = price + tp_pips * point if order_type == mt5.ORDER_TYPE_BUY else price - tp_pips * point

    # Valida que SL y TP est√©n suficientemente lejos
    min_stop_distance = (info.trade_stops_level or 10) * point
    if abs(price - sl) < min_stop_distance or abs(price - tp) < min_stop_distance:
        return

    # Crea la orden
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": lot,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": 10,
        "magic": 234000,
        "comment": "Cruce EMA",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_FOK,
    }

    result = mt5.order_send(request)
    if result.retcode == mt5.TRADE_RETCODE_DONE:
        print(f"‚úÖ Orden ejecutada en {symbol} ({'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'})")

def process_symbol(symbol):
    """Procesa un s√≠mbolo individual: verifica cruce de EMA y opera."""

    # Verifica que el s√≠mbolo est√© configurado para operar
    if symbol not in LOTES_POR_SIMBOLO:
        print(f"‚ö†Ô∏è S√≠mbolo no configurado: {symbol}")
        return

    # Obtiene los datos hist√≥ricos
    rates = mt5.copy_rates_from_pos(symbol, TIMEFRAME, 0, NUMBER_OF_CANDLES)
    if rates is None or len(rates) < EMA_PERIOD:
        print(f"‚ö†Ô∏è Datos insuficientes para {symbol}")
        return

    # Carga los datos en un DataFrame y calcula la EMA
    data = pd.DataFrame(rates)
    data['EMA'] = get_ema(data, EMA_PERIOD)

    # Extrae las dos √∫ltimas velas
    prev = data.iloc[-2]
    curr = data.iloc[-1]

    # Detecta cruces de EMA
    cross_above = prev['close'] < prev['EMA'] and curr['close'] > curr['EMA']
    cross_below = prev['close'] > prev['EMA'] and curr['close'] < curr['EMA']

    if not cross_above and not cross_below:
        #print(f"üîç Sin cruce en {symbol}")
        return

    # Determina el tipo de orden a colocar
    order_type = mt5.ORDER_TYPE_BUY if cross_above else mt5.ORDER_TYPE_SELL
    opposite_type = mt5.ORDER_TYPE_SELL if order_type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY

    print(f"üìà Cruce detectado en {symbol}: {'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'}")

    # Revisa si ya hay una posici√≥n abierta en la misma direcci√≥n
    positions = mt5.positions_get(symbol=symbol)
    same_side_open = any(p.type == order_type for p in positions)

    if same_side_open:
        print(f"‚ö†Ô∏è Ya hay una posici√≥n abierta en {symbol} en la misma direcci√≥n")
        return

    # Ejecuta la orden
    lot_config = LOTES_POR_SIMBOLO[symbol]
    lot_size = get_valid_lot_size(symbol, lot_config)
    print(f"üõí Ejecutando orden en {symbol}: {'BUY' if order_type == mt5.ORDER_TYPE_BUY else 'SELL'} con lote {lot_size}")
    place_order(symbol, lot_size, order_type, STOP_LOSS_PIPS, TAKE_PROFIT_PIPS)


def main_loop():
    """Bucle principal que itera constantemente procesando todos los s√≠mbolos."""
    while True:
        for symbol in SYMBOLS:
            process_symbol(symbol)
            time.sleep(SLEEP_INTERVAL)
        time.sleep(INTERVAL_SECONDS)

# --- Punto de entrada ---
if __name__ == "__main__":
    try:
        init_mt5()
        close_all_positions()
        main_loop()
    except KeyboardInterrupt:
        print("üö© Bot detenido por el usuario.")
    finally:
        mt5.shutdown()
